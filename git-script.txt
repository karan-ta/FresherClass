
*** all commands try with clean/empty staging and clean/empty workspace.
commit all files already present in your staging or modified in workspace and then try each below example :
check that staging and workspace are both clean (have not untracked or modified files) with git status before every example.
use up arrow and tab for easy typing.



What is a version control system.
---------------------------------------------------------
Version control software is a database of versions.
just like a database consists of backend data - version control software is a database and consists of versions of your code.

What is git 
---------------------------------------------------------
git is a version control software.
in git a repository is the database of commits.
you can have local as well as remote repositories.
let us go ahead and make a repository

//make a directory inside your code directory
mkdir learngit
//This is your working tree.
//now let us create a repository and associate it to 
//this working tree

git config user.name "myemail"
git config user.email "myname"
git init

//repository is initialized
git log
git branch
git status

cd .git

what are the outputs of above ?
----------------------

touch README
git status
git add
git commit -a -m "test"
git log
git branch

now what are the outputs of above ?


touch INDEX
touch FEATURE
now what are the outputs of:
git status
git commit -a -m "test"
git log
git branch

try to predict the git status.


What is the two stage commit process?
------------------------------------------------
git offers a two stage commit process

first you add files to a staging area and secondly you commit them to local repository.
you add files in staging area to prepare for the commit.
to add to staging area - you do a git add 
A snapshot is prepared in the staging area for the next commit.
An index of files is prepared for the next commit

so first git add 
and then git commit

This helps you to plan your commits.
10 files - 5 in one commit and 5 in other
Think of commits as pieces of your work which need to be distributed.

Think of staging area / index as
a way of “confirming” your changes, one by one, before doing a commit.
git status

** show diff now
open a tracked file in vim 
vim -p readme
git diff
git add
git diff HEAD
git commit

use diff to confirm your actions



How to skip the staging area ?
--------------------------------------------------------
when you create a new file.
it is untracked
 you cannot skip the staging area and directly commit it.
vim -p newfile
now you do git status
newfile is untracked by git - git does not know about a new file
unless you first add it into the staging area.
so you need to do
 git add newfile
 so that git knows that this newly created file 
should be tracked by git.


when you modify a file which is already tracked by git - you can skip the staging area .
Use the flag -a
git commit -a -m "commit all modified files in working tree"
----------------------------------------
//make staging and workspace clean by commiting everything already present in staging.
with clean workspace and clean staging - 
vim -p readme > a line
vim -p index > a line
git add .
vim -p index
// 2 files in staging area and 1 file modified
//lets commit all
git commit -a -m "commit staging and modified together and skiping staging area"


only modified files can be committed by skipping staging area.

try predicting status .
if new file is created in workspace - status will be untracked.
if file is added in staging and then file is modified in workspace, 
then status will be modified.

When to skip the staging area ?
-------------------------------------------------------
when you dont need to plan your commits.
if you see the diff between workspace and repository with 
git diff HEAD
and you are happy with the difference.
also if you see the diff between workspace and staging with 
git diff 
and you are happy. 
being happy here means - if your diff results are the exact ones you want to commit.
so go ahead and commit if you are happy with the diff.


Why we need the two stage commit process ?
------------------------------------------------------------------------
suppose you create a new file in the working tree and you do not wish to commit this file.
let it remain untracked. 
so that its not commited untill you track it (by doing git add)
so when you commit with the -a flag , even then staging allows you to not commit some files.
just let them be untracked if you do not want to commit.

it also allows you to plan your commits better. (we will discuss this)



Why do we need version control 
-------------------------------------------
if working alone - to go back to any past combination of commits.

you made a change to file in your workspace.
you want to revert that change and replace it with the one on your local repository.
git checkout <filename>
** in this case git checkout is a dangerous command.
** use git diff to confirm.


To just update the message, add files present in staging - git commit --amend
vim -p file1 > test
git add
git commit
git commit --amend
//update commit message
//oops we forgot to add meta file
vim -p file1_meta > test
git add file1_meta
//lets add file1_meta to the previous commit
git commit --amend

Let us now see how to go to previous commits
with clean staging and workspace - please tr
y below:

vim -p file1 > test
vim -p file 2 > test
git add file1
git commit -m "add file1"
git add file2
git commit -m "add file2"
git log --oneline 
// you will see 2 commits . 
git checkout <hash of first commit>
ls
git log

// was this a safe operation or dangerous one ?

now did we loose index file ?
how to get it back ? (is git a liar ?)
to go back to latest state before checkout - just checkout your branch as its pointing to the latest commit you had made.

git checkout master
git log --oneline

suppose you want to keep only the first commit and remove the second commit as it is not needed by you at all even in workspace.then :
git reset --hard resets workspace and repo and staging.
git reset preserves the working directory. The commits are gone, but the contents are still on disk. This is the safest option, but often, you'll want to "undo" the commits and the changes in one move—that's what --hard does.

git reset --hard <commit number>
ls
git log --oneline
second commit is gone forever with reset --hard
to get second commit after reset hard 
git reflog
git reset --hard <your commit hash>

HEAD changes only.HEAD changes when you switch branches, make commits with git commit and un-make commits with git reset, but HEAD does not change when you git checkout -- <bad filename> (from an earlier scenario—as mentioned before, those changes were never committed, so the reflog can't help us recover those.

git reflog doesn't last forever. Git will periodically clean up objects which are "unreachable." Don't expect to find months-old commits lying around in the reflog forever.

Your reflog is yours and yours alone. You can't use git reflog to restore another developer's un-pushed commit

now let us see detached state of head:
let us checkout again to first commit.
we will go to detached head state
And in that state add new commits.
If you are not on the latest commit - meaning that HEAD is pointing to a prior commit in history its called detached HEAD.

git log --oneline
git checkout <first commit>

we are now in detached head state.
now make a new commit 

vim -p file3 > test
git add
git commit

git log --oneline

git checkout master 
now is it safe or dangerous ?

so whenever you are in a detached head state - make a branch.
To make local changes and to apply them on a committed version :
modify a file in workspace 
git stash save
git checkout master
git stash pop
//your modifications are saved

suppose you want to undo the last commit .
but you want your workspace to be unchanged.

$ git commit -m "Something terribly misguided"              
$ git reset HEAD~                                           
<< edit files as necessary >>                               
$ git add ...                                               
$ git commit    

also try with this git reset --soft HEAD~






To distribute any combination of commits to your colleagues and customers.
Without version control - can you see what are changes to a file between two specified dates?

Why GIT ?



What is HEAD ?
--------------------------------------------
latest commit of current branch is HEAD
git rev-parse HEAD
try above commit on different branches

What is git diff ?
---------------------------------------------
commit everything in staging and workspace with command git commit -a
now workspace and staging are clean.

now :

vim -p readme > a line
vim -p index > a line
git status
//modified files are 2 .
git diff
//diff between staging and workspace
git diff HEAD 
//same as above
git diff --cached
//both staging and HEAD have nothing new so no diff

Working with git branching?
------------------------------------------------------
Cd code/learngit
Git init
Git branch 
// no branch will be present
Touch README
notepad README
//write text as first commit in readme, save and close
Git status
Git add
Git commit
Git branch
//master branch will now be created
Git log
//shows one commit
// let us make a new branch
Git branch feature-branch
//switch to feature-branch
Git checkout feature-branch
Git log
//shows one commit as branch was created after one commit in master branch
Notepad README
//edit text and write second commit save and close
Git add  
git commit -m “second commit”
Git log
//2 commits shown in feature branch
//now switch to master branch
Git checkout master
Notepad README 

//only one commit is present in working tree - as second commit was added in feature branch and not master branch
Close notepad
Git log 
//only one commit is shown as second commit was done in feature branch and not master branch
//Now we need second commit in master branch
Git merge feature-branch
Git log
// 2 commits are shown
Notepad README 
// 2 commits are shown 

Close notepad
//Repeat this cycle few times.


What is git cherry-pick?
--------------------------------------------
on master branch - 
vim -p feature1
vim -p feature2
git add feature1
git branch newfeature-branch
git commit -m "feature1"
//note the commit hash with git log --oneline
git add feature2
git commit -m "feature2"
//note the commit hash with git log --oneline
git checkout newfeature-branch
ls
git cherry-pick <commit number>
ls
switch to master and git log --oneline
switch to newfeature-branch and git log --oneline
observe the difference in logs.


Diagrams - 
https://git-scm.com/images/about/index1@2x.png
http://i.stack.imgur.com/MgaV9.png
http://images.abizern.org.s3.amazonaws.com/365git/March10/GitDiffSimple.png
http://i.stack.imgur.com/NuThL.png









